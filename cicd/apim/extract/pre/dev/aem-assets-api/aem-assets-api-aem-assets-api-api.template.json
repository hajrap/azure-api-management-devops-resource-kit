{
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "ApimServiceName": {
      "type": "string"
    },
    "serviceUrl": {
      "type": "object"
    }
  },
  "resources": [
    {
      "properties": {
        "description": "The AEM Assets API provides access to DCP solution’s Adobe AEM Assets HTTP API, allows for create-read-update-delete (CRUD) operations on digital assets, including on metadata, on renditions, and on comments, together with structured content.\n using Experience Manager Content Fragments.",
        "authenticationSettings": {
          "subscriptionKeyRequired": false
        },
        "subscriptionKeyParameterNames": {
          "header": "Ocp-Apim-Subscription-Key",
          "query": "subscription-key"
        },
        "apiRevision": "2",
        "apiVersion": "v1",
        "isCurrent": true,
        "apiRevisionDescription": "removed set-backend-uri policies  and added Post operation",
        "apiVersionSetId": "[concat(resourceId('Microsoft.ApiManagement/service', parameters('ApimServiceName')), '/apiVersionSets/60fa28790a85b33f60c428f8')]",
        "subscriptionRequired": true,
        "displayName": "AEM Assets API",
        "serviceUrl": "[parameters('serviceUrl').aemassetsapi]",
        "path": "aem-assets",
        "protocols": [
          "https"
        ]
      },
      "name": "[concat(parameters('ApimServiceName'), '/aem-assets-api')]",
      "type": "Microsoft.ApiManagement/service/apis",
      "apiVersion": "2021-01-01-preview",
      "dependsOn": []
    },
    {
      "properties": {
        "contentType": "application/vnd.oai.openapi.components+json",
        "document": {
          "components": {
            "schemas": {
              "RequestPayload_RawBinary": {
                "type": "object",
                "example": {
                  "apiName": "Uploadanassetbinary",
                  "fields": {
                    "Content": "SGksIFRoaXMgaXMgYmFzZTY0"
                  }
                }
              }
            }
          }
        }
      },
      "name": "[concat(parameters('ApimServiceName'), '/aem-assets-api/1627264952083')]",
      "type": "Microsoft.ApiManagement/service/apis/schemas",
      "apiVersion": "2021-01-01-preview",
      "dependsOn": [
        "[resourceId('Microsoft.ApiManagement/service/apis', parameters('ApimServiceName'), 'aem-assets-api')]"
      ]
    },
    {
      "properties": {
        "templateParameters": [
          {
            "name": "folderPath",
            "description": "Folder path where binary file suppose to be uploaded.\nSeparate path \"-\" key \nexample : sydneywater-mpg",
            "type": "string",
            "required": true,
            "values": [
              "sydneywater-mpg"
            ]
          },
          {
            "name": "assetName",
            "description": "Name of asset file which extension \nexample : assetfile_04.pdf",
            "type": "string",
            "required": true,
            "values": []
          }
        ],
        "description": "Creates an asset’s binary (rendition with name original). An update triggers the default asset processing workflow to execute, if it is configured.",
        "request": {
          "queryParameters": [],
          "headers": [
            {
              "name": "CSRF-Token",
              "type": "string",
              "required": true,
              "values": []
            },
            {
              "name": "Content-Type",
              "type": "string",
              "required": true,
              "values": [
                "application/octet-stream"
              ]
            }
          ],
          "representations": []
        },
        "responses": [],
        "displayName": "Create an asset binary",
        "method": "POST",
        "urlTemplate": "/api/assets/{folderPath}/{assetName}"
      },
      "name": "[concat(parameters('ApimServiceName'), '/aem-assets-api/611df6ec47c0966d6269eab7')]",
      "type": "Microsoft.ApiManagement/service/apis/operations",
      "apiVersion": "2021-01-01-preview",
      "dependsOn": [
        "[resourceId('Microsoft.ApiManagement/service/apis', parameters('ApimServiceName'), 'aem-assets-api')]"
      ]
    },
    {
      "properties": {
        "value": "<!--\n    IMPORTANT:\n    - Policy elements can appear only within the <inbound>, <outbound>, <backend> section elements.\n    - To apply a policy to the incoming request (before it is forwarded to the backend service), place a corresponding policy element within the <inbound> section element.\n    - To apply a policy to the outgoing response (before it is sent back to the caller), place a corresponding policy element within the <outbound> section element.\n    - To add a policy, place the cursor at the desired insertion point and select a policy from the sidebar.\n    - To remove a policy, delete the corresponding policy statement from the policy document.\n    - Position the <base> element within a section element to inherit all policies from the corresponding section element in the enclosing scope.\n    - Remove the <base> element to prevent inheriting policies from the corresponding section element in the enclosing scope.\n    - Policies are applied in the order of their appearance, from the top down.\n    - Comments within policy elements are not supported and may disappear. Place your comments between policy elements or at a higher level scope.\n-->\r\n<policies>\r\n\t<inbound>\r\n\t\t<base />\r\n\t\t<set-variable name=\"fullFolderPath\" value=\"@{\n            return context.Request.MatchedParameters.GetValueOrDefault(\"folderPath\").Replace(\"-\",@\"/\");}\" />\r\n\t\t<rewrite-uri template=\"@{\n            return \"/api/assets/\" + context.Variables.GetValueOrDefault<string>(\"fullFolderPath\")\n            + \"/\"+context.Request.MatchedParameters.GetValueOrDefault(\"assetName\");\n        }\" copy-unmatched-params=\"true\" />\r\n\t</inbound>\r\n\t<backend>\r\n\t\t<base />\r\n\t</backend>\r\n\t<outbound>\r\n\t\t<base />\r\n\t</outbound>\r\n\t<on-error>\r\n\t\t<base />\r\n\t</on-error>\r\n</policies>",
        "format": "rawxml"
      },
      "name": "[concat(parameters('ApimServiceName'), '/aem-assets-api/611df6ec47c0966d6269eab7/policy')]",
      "type": "Microsoft.ApiManagement/service/apis/operations/policies",
      "apiVersion": "2021-01-01-preview",
      "dependsOn": [
        "[resourceId('Microsoft.ApiManagement/service/apis/operations', parameters('ApimServiceName'), 'aem-assets-api', '611df6ec47c0966d6269eab7')]"
      ]
    },
    {
      "properties": {
        "templateParameters": [],
        "description": "",
        "request": {
          "queryParameters": [],
          "headers": [],
          "representations": []
        },
        "responses": [],
        "displayName": "Get token",
        "method": "GET",
        "urlTemplate": "/libs/granite/csrf/token.json"
      },
      "name": "[concat(parameters('ApimServiceName'), '/aem-assets-api/gettoken')]",
      "type": "Microsoft.ApiManagement/service/apis/operations",
      "apiVersion": "2021-01-01-preview",
      "dependsOn": [
        "[resourceId('Microsoft.ApiManagement/service/apis', parameters('ApimServiceName'), 'aem-assets-api')]"
      ]
    },
    {
      "properties": {
        "value": "<!--\n    IMPORTANT:\n    - Policy elements can appear only within the <inbound>, <outbound>, <backend> section elements.\n    - To apply a policy to the incoming request (before it is forwarded to the backend service), place a corresponding policy element within the <inbound> section element.\n    - To apply a policy to the outgoing response (before it is sent back to the caller), place a corresponding policy element within the <outbound> section element.\n    - To add a policy, place the cursor at the desired insertion point and select a policy from the sidebar.\n    - To remove a policy, delete the corresponding policy statement from the policy document.\n    - Position the <base> element within a section element to inherit all policies from the corresponding section element in the enclosing scope.\n    - Remove the <base> element to prevent inheriting policies from the corresponding section element in the enclosing scope.\n    - Policies are applied in the order of their appearance, from the top down.\n    - Comments within policy elements are not supported and may disappear. Place your comments between policy elements or at a higher level scope.\n-->\r\n<policies>\r\n\t<inbound>\r\n\t\t<base />\r\n\t</inbound>\r\n\t<backend>\r\n\t\t<base />\r\n\t</backend>\r\n\t<outbound>\r\n\t\t<base />\r\n\t</outbound>\r\n\t<on-error>\r\n\t\t<base />\r\n\t</on-error>\r\n</policies>",
        "format": "rawxml"
      },
      "name": "[concat(parameters('ApimServiceName'), '/aem-assets-api/gettoken/policy')]",
      "type": "Microsoft.ApiManagement/service/apis/operations/policies",
      "apiVersion": "2021-01-01-preview",
      "dependsOn": [
        "[resourceId('Microsoft.ApiManagement/service/apis/operations', parameters('ApimServiceName'), 'aem-assets-api', 'gettoken')]"
      ]
    },
    {
      "properties": {
        "templateParameters": [
          {
            "name": "folderPath",
            "description": "Folder path where binary file suppose to be uploaded.\nSeparate path \"-\" key \nexample : sydneywater-mpg",
            "type": "string",
            "required": true,
            "values": [
              "sydneywater-mpg"
            ]
          },
          {
            "name": "assetName",
            "description": "Name of asset file which extension \nexample : assetfile_04.pdf",
            "type": "string",
            "required": true,
            "values": []
          }
        ],
        "description": "Updates an asset’s binary (rendition with name original). An update triggers the default asset processing workflow to execute, if it is configured.",
        "request": {
          "queryParameters": [],
          "headers": [
            {
              "name": "CSRF-Token",
              "type": "string",
              "required": true,
              "values": []
            },
            {
              "name": "Content-Type",
              "type": "string",
              "required": true,
              "values": [
                "application/octet-stream"
              ]
            }
          ],
          "representations": []
        },
        "responses": [],
        "displayName": "Upload an asset binary",
        "method": "PUT",
        "urlTemplate": "/api/assets/{folderPath}/{assetName}"
      },
      "name": "[concat(parameters('ApimServiceName'), '/aem-assets-api/upload-an-asset-binary')]",
      "type": "Microsoft.ApiManagement/service/apis/operations",
      "apiVersion": "2021-01-01-preview",
      "dependsOn": [
        "[resourceId('Microsoft.ApiManagement/service/apis', parameters('ApimServiceName'), 'aem-assets-api')]"
      ]
    },
    {
      "properties": {
        "value": "<!--\n    IMPORTANT:\n    - Policy elements can appear only within the <inbound>, <outbound>, <backend> section elements.\n    - To apply a policy to the incoming request (before it is forwarded to the backend service), place a corresponding policy element within the <inbound> section element.\n    - To apply a policy to the outgoing response (before it is sent back to the caller), place a corresponding policy element within the <outbound> section element.\n    - To add a policy, place the cursor at the desired insertion point and select a policy from the sidebar.\n    - To remove a policy, delete the corresponding policy statement from the policy document.\n    - Position the <base> element within a section element to inherit all policies from the corresponding section element in the enclosing scope.\n    - Remove the <base> element to prevent inheriting policies from the corresponding section element in the enclosing scope.\n    - Policies are applied in the order of their appearance, from the top down.\n    - Comments within policy elements are not supported and may disappear. Place your comments between policy elements or at a higher level scope.\n-->\r\n<policies>\r\n\t<inbound>\r\n\t\t<base />\r\n\t\t<set-variable name=\"fullFolderPath\" value=\"@{\n            return context.Request.MatchedParameters.GetValueOrDefault(\"folderPath\").Replace(\"-\",@\"/\");}\" />\r\n\t\t<rewrite-uri template=\"@{\n            return \"/api/assets/\" + context.Variables.GetValueOrDefault<string>(\"fullFolderPath\")\n            + \"/\"+context.Request.MatchedParameters.GetValueOrDefault(\"assetName\");\n        }\" copy-unmatched-params=\"true\" />\r\n\t</inbound>\r\n\t<backend>\r\n\t\t<base />\r\n\t</backend>\r\n\t<outbound>\r\n\t\t<base />\r\n\t</outbound>\r\n\t<on-error>\r\n\t\t<base />\r\n\t</on-error>\r\n</policies>",
        "format": "rawxml"
      },
      "name": "[concat(parameters('ApimServiceName'), '/aem-assets-api/upload-an-asset-binary/policy')]",
      "type": "Microsoft.ApiManagement/service/apis/operations/policies",
      "apiVersion": "2021-01-01-preview",
      "dependsOn": [
        "[resourceId('Microsoft.ApiManagement/service/apis/operations', parameters('ApimServiceName'), 'aem-assets-api', 'upload-an-asset-binary')]"
      ]
    },
    {
      "properties": {
        "value": "<!--\n    IMPORTANT:\n    - Policy elements can appear only within the <inbound>, <outbound>, <backend> section elements.\n    - To apply a policy to the incoming request (before it is forwarded to the backend service), place a corresponding policy element within the <inbound> section element.\n    - To apply a policy to the outgoing response (before it is sent back to the caller), place a corresponding policy element within the <outbound> section element.\n    - To add a policy, place the cursor at the desired insertion point and select a policy from the sidebar.\n    - To remove a policy, delete the corresponding policy statement from the policy document.\n    - Position the <base> element within a section element to inherit all policies from the corresponding section element in the enclosing scope.\n    - Remove the <base> element to prevent inheriting policies from the corresponding section element in the enclosing scope.\n    - Policies are applied in the order of their appearance, from the top down.\n    - Comments within policy elements are not supported and may disappear. Place your comments between policy elements or at a higher level scope.\n-->\r\n<policies>\r\n\t<inbound>\r\n\t\t<base />\r\n\t\t<authentication-basic username=\"{{aem-api-authentication-username}}\" password=\"{{aem-api-authentication-password}}\" />\r\n\t</inbound>\r\n\t<backend>\r\n\t\t<base />\r\n\t</backend>\r\n\t<outbound>\r\n\t\t<base />\r\n\t</outbound>\r\n\t<on-error>\r\n\t\t<base />\r\n\t</on-error>\r\n</policies>",
        "format": "rawxml"
      },
      "name": "[concat(parameters('ApimServiceName'), '/aem-assets-api/policy')]",
      "type": "Microsoft.ApiManagement/service/apis/policies",
      "apiVersion": "2021-01-01-preview",
      "dependsOn": [
        "[resourceId('Microsoft.ApiManagement/service/apis', parameters('ApimServiceName'), 'aem-assets-api')]"
      ]
    },
    {
      "name": "[concat(parameters('ApimServiceName'), '/3rd-party-apis/aem-assets-api')]",
      "type": "Microsoft.ApiManagement/service/products/apis",
      "apiVersion": "2021-01-01-preview",
      "dependsOn": [
        "[resourceId('Microsoft.ApiManagement/service/apis', parameters('ApimServiceName'), 'aem-assets-api')]"
      ]
    },
    {
      "properties": {
        "alwaysLog": "allErrors",
        "loggerId": "/subscriptions/7fdba8aa-bd1e-4895-aff7-b64589d0a27e/resourceGroups/rg-corenonprod01-integration-00/providers/Microsoft.ApiManagement/service/apim-corenonprod01-integration-00/loggers/appInsightsPrimaryDeploy",
        "httpCorrelationProtocol": "Legacy",
        "verbosity": "information",
        "logClientIp": true,
        "sampling": {
          "samplingType": "fixed",
          "percentage": 100.0
        },
        "frontend": {
          "request": {
            "headers": [
              "TransactionContextID",
              "ApplicationID",
              "UserID",
              "Version",
              "apim-correlation-id"
            ],
            "body": {
              "bytes": 8192
            }
          },
          "response": {
            "headers": [
              "apim-correlation-id"
            ],
            "body": {
              "bytes": 8192
            }
          }
        },
        "backend": {
          "request": {
            "headers": [],
            "body": {
              "bytes": 8192
            }
          },
          "response": {
            "headers": [],
            "body": {
              "bytes": 8192
            }
          }
        }
      },
      "name": "[concat(parameters('ApimServiceName'), '/applicationinsights')]",
      "type": "Microsoft.ApiManagement/service/diagnostics",
      "apiVersion": "2021-01-01-preview",
      "dependsOn": []
    },
    {
      "properties": {
        "loggerId": "/subscriptions/7fdba8aa-bd1e-4895-aff7-b64589d0a27e/resourceGroups/rg-corenonprod01-integration-00/providers/Microsoft.ApiManagement/service/apim-corenonprod01-integration-00/loggers/azuremonitor",
        "logClientIp": true,
        "sampling": {
          "samplingType": "fixed",
          "percentage": 100.0
        }
      },
      "name": "[concat(parameters('ApimServiceName'), '/azuremonitor')]",
      "type": "Microsoft.ApiManagement/service/diagnostics",
      "apiVersion": "2021-01-01-preview",
      "dependsOn": []
    }
  ]
}